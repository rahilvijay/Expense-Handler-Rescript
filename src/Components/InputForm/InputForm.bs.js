// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as InputState from "./InputState.bs.js";
import * as StaticText from "../StaticText.bs.js";

import './InputForm.css';
;

function reducer(state, action) {
  if (typeof action === "number") {
    return InputState.intial;
  }
  switch (action.TAG | 0) {
    case /* SetRemarkValue */0 :
        return {
                title: action._0,
                amount: state.amount,
                titleState: state.titleState,
                amountState: state.amountState,
                amountTouched: state.amountTouched,
                titleTouched: state.titleTouched
              };
    case /* SetAmountValue */1 :
        return {
                title: state.title,
                amount: action._0,
                titleState: state.titleState,
                amountState: state.amountState,
                amountTouched: state.amountTouched,
                titleTouched: state.titleTouched
              };
    case /* SetRemarkValidState */2 :
        if (action._0 !== "") {
          return {
                  title: state.title,
                  amount: state.amount,
                  titleState: true,
                  amountState: state.amountState,
                  amountTouched: state.amountTouched,
                  titleTouched: state.titleTouched
                };
        } else {
          return {
                  title: state.title,
                  amount: state.amount,
                  titleState: false,
                  amountState: state.amountState,
                  amountTouched: state.amountTouched,
                  titleTouched: state.titleTouched
                };
        }
    case /* SetAmountValidState */3 :
        if (Math.abs(action._0) > 0.0) {
          return {
                  title: state.title,
                  amount: state.amount,
                  titleState: state.titleState,
                  amountState: true,
                  amountTouched: state.amountTouched,
                  titleTouched: state.titleTouched
                };
        } else {
          return {
                  title: state.title,
                  amount: state.amount,
                  titleState: state.titleState,
                  amountState: false,
                  amountTouched: state.amountTouched,
                  titleTouched: state.titleTouched
                };
        }
    case /* SetAmountTouchState */4 :
        return {
                title: state.title,
                amount: state.amount,
                titleState: state.titleState,
                amountState: state.amountState,
                amountTouched: action._0,
                titleTouched: state.titleTouched
              };
    case /* SetRemarkTouchState */5 :
        return {
                title: state.title,
                amount: state.amount,
                titleState: state.titleState,
                amountState: state.amountState,
                amountTouched: state.amountTouched,
                titleTouched: action._0
              };
    
  }
}

function InputForm(Props) {
  var addItem = Props.addItem;
  var match = React.useReducer(reducer, InputState.intial);
  var dispatch = match[1];
  var inputState = match[0];
  var onRemarkChangeHandler = function ($$event) {
    var value = $$event.target.value;
    Curry._1(dispatch, {
          TAG: /* SetRemarkValue */0,
          _0: value
        });
    Curry._1(dispatch, {
          TAG: /* SetRemarkValidState */2,
          _0: value
        });
  };
  var onAmountChangeHandler = function ($$event) {
    var value = $$event.target.value;
    var a = Belt_Float.fromString(value);
    var valueResolved = a !== undefined ? a : 0.0;
    Curry._1(dispatch, {
          TAG: /* SetAmountValue */1,
          _0: value
        });
    Curry._1(dispatch, {
          TAG: /* SetAmountValidState */3,
          _0: valueResolved
        });
  };
  var onSubmitHandler = function ($$event) {
    $$event.preventDefault();
    Curry._1(dispatch, {
          TAG: /* SetRemarkTouchState */5,
          _0: true
        });
    Curry._1(dispatch, {
          TAG: /* SetRemarkTouchState */5,
          _0: true
        });
    if (inputState.titleState && inputState.amountState) {
      var a = Belt_Float.fromString(inputState.amount);
      var vaues = a !== undefined ? a : 0.0;
      Curry._1(addItem, {
            title: inputState.title,
            amount: vaues
          });
      return Curry._1(dispatch, /* SetInitial */0);
    }
    Curry._1(dispatch, /* SetInitial */0);
    Curry._1(dispatch, {
          TAG: /* SetRemarkTouchState */5,
          _0: true
        });
  };
  return React.createElement("form", {
              className: "form",
              onSubmit: onSubmitHandler
            }, React.createElement("p", {
                  className: "warning"
                }, !inputState.titleState && inputState.titleTouched ? "Please correct Input" : ""), React.createElement("p", {
                  className: "warning"
                }, !inputState.amountState && inputState.amountTouched ? "Please correct Input" : ""), React.createElement("div", {
                  className: "form-controls"
                }, React.createElement("label", undefined, StaticText.inputFormLabel1), React.createElement("input", {
                      placeholder: StaticText.inputFOrmPH1,
                      type: "text",
                      value: inputState.title,
                      onBlur: (function (param) {
                          Curry._1(dispatch, {
                                TAG: /* SetRemarkTouchState */5,
                                _0: true
                              });
                        }),
                      onChange: onRemarkChangeHandler
                    })), React.createElement("div", {
                  className: "form-controls"
                }, React.createElement("label", undefined, StaticText.inputFormLabel2), React.createElement("p", undefined, StaticText.inputFormInfo), React.createElement("input", {
                      placeholder: StaticText.inputFOrmPH2,
                      step: 0.01,
                      type: "number",
                      value: inputState.amount,
                      onBlur: (function (param) {
                          Curry._1(dispatch, {
                                TAG: /* SetAmountTouchState */4,
                                _0: true
                              });
                        }),
                      onChange: onAmountChangeHandler
                    })), React.createElement("button", undefined, "Add New Expense"));
}

var make = InputForm;

export {
  reducer ,
  make ,
}
/*  Not a pure module */
